server:
  port: 8080
  servlet:
    encoding:
      force-response: true

spring:
  profiles:
    default: local

  jpa:
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
        use_sql_comments: true
        default_batch_fetch_size: 500
        jdbc:
          time_zone: Asia/Seoul

  datasource:
    driver-class-name: org.postgresql.Driver
    url: ${POSTGRESQL_DB_URL}
    username: ${POSTGRESQL_USER_NAME}
    password: ${POSTGRESQL_PASSWORD}

  data:
    redis:
      host: localhost #  Redis 서버가 다른 호스트에서 실행 중이라면 해당 호스트의 IP 주소나 도메인 이름을 여기에 지정
      port: 6379
      timeout: 6 #  Redis 클라이언트가 Redis 서버에 연결하기 위해 대기하는 시간

  kafka:
    listener:
      ack-mode: MANUAL
    topic:
      alarm: alarm
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.LongSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      bootstrap-servers: localhost:9092
      group-id: alarm
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.LongDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json:
          trusted.packages: 'java.util, java.lang, dev.sodev.global.kafka.event'

jwt:
  secret: validSecretKeyvalidSecretKeyvalidSecretKeyvalidSecretKeyvalidSecretKeyvalidSecretKey
  refresh-secret: refreshSecretKeyrefreshSecretKeyrefreshSecretKeyrefreshSecretKeyrefreshSecretKey

logging.level:
  org.hibernate.SQL: debug

email:
  host: ${MAIL_SERVER}
  username: ${MAIL_ID}
  password: ${MAIL_PASSWORD}
  port: ${MAIL_PORT}
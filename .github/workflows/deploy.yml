name: CI-CD # 스크립트를 돌렸을 때 노출할 이름

on:
  push:
    branches: # 어떤 브랜치에 push가 일어나면 동작하게 할건지?
      - main # 다른 브랜치 사용시 변경하거나 여러개 나열하면 된다.

env: # 여러 스텝에서 사용하는 변수들을 한 곳으로 모아서 정의
  S3_BUCKET_NAME: sodev-s3 # S3의 버킷이름
  RESOURCE_PATH: ./src/main/resources/application.yml
  CODE_DEPLOY_APPLICATION_NAME: CODE-DEPLOY-SODEV # 코드 디플로이 어플리케이션 이름
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: CODE-DEPLOY-SODEV-GROUP # 코드 디플로이 어플리케이션 그룹 이름
  PROJECT_NAME: sodev-project

jobs: # 하나의 job 선언하고 그 안에 여러 step들을 정의
  build:
    runs-on: ubuntu-latest # EC2의 os를 ubuntu를 선택했고 실제 os와 환경을 맞출 수 있는 용도. 관련은 딱히 없지만 관례상 docker 처럼 적어줌

    steps: # 본격적으로 스텝 정의. 순서대로 동작하기 때문에 순서 유의
      - name: Checkout # 스텝 이름을 지정하여 알아볼 수 있게 함
        uses: actions/checkout@v2 # 정의한 actions 동작으로 checkout함

      - name: Set up JDK 17 # JDK버전 지정
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17

      - name: Set yml file
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{ env.RESOURCE_PATH }}
        env:
          spring.datasource.url: ${{ secrets.DB_URL }}
          spring.datasource.username: ${{ secrets.DB_USERNAME }}
          spring.datasource.password: ${{ secrets.DB_PASSWORD }}
          spring.data.redis.host: ${{ secrets.REDIS_HOST }}
          spring.kafka.producer.bootstrap-servers: ${{ secrets.KAFKA_PRODUCER_SERVER }}
          spring.kafka.consumer.bootstrap-servers: ${{ secrets.KAFKA_CONSUMER_SERVER }}
          jwt.secret: ${{ secrets.JWT_SECRET_KEY }}
          email.host: ${{ secrets.MAIL_SERVER }}
          email.username: ${{ secrets.MAIL_ID }}
          email.password: ${{ secrets.MAIL_PASSWORD }}
          email.port: ${{ secrets.MAIL_PORT }}

      - name: Grant execute permission for gradlew # 소스파일을 gradlew 로 빌드 할 건데 그 전에 권한 부여
        run: chmod +x ./gradlew
        shell: bash

      - name: Build with Gradle # 부여된 권한으로 실제 빌드하는 부분
        run: ./gradlew build -x test
        shell: bash

      - name: Make zip file # 빌드된 파일을 그 자체로 올려도 되지만, 하나의 zip 파일로 압축시켜 올리는게 더 편리하기 떄문에 압축
        run: zip -r ./$GITHUB_SHA . # $GITHUB_SHA -> 중복되지 않는 일종의 해시값 같은 것
        shell: bash

      - name: Configure AWS credentials # AWS 접근 권한 등록해주는 부분
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # 깃허브 프로젝트 리포지토리의 Actions secrets에 변수로 저장한 값을 사용
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3 # 위에서 압축시킨 프로젝트 결과 파일을 S3에 업로드 하는 부분
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

      - name: Code Deploy # 최종적으로 Code Deploy Agent를 사용해서 S3 에 올라가있는 파일을 가져와서 배포하는 부분
        run: | # 코드가 길어져서 엔터를 치겠다는 하나의 표현방식
          aws deploy create-deployment \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip
